// POST: CarInfoes/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create([Bind(Include = "CarId,ManufacturerId,CarTypeId,TransmissionTypeId,Engine,BHP,Mileage,Seat,AirBagDetails,BootSpace,Price")] CarInfo carInfo)
        {
            if (ModelState.IsValid)
            {
                var response = await _httpClient.PostAsJsonAsync("api/CarInfoes", carInfo);
                if (response.IsSuccessStatusCode)
                {
                    return RedirectToAction("Index");
                }
            }

            // If we got this far, something failed, redisplay form with dropdown data
            ViewBag.ManufacturerId = new SelectList(await GetDropdownDataAsync<Manufacturer>("api/DropdownData/Manufacturers"), "Id", "Name", carInfo.ManufacturerId);
            ViewBag.CarTypeId = new SelectList(await GetDropdownDataAsync<CarType>("api/DropdownData/CarTypes"), "Id", "Type", carInfo.CarTypeId);
            ViewBag.TransmissionTypeId = new SelectList(await GetDropdownDataAsync<CarTransmissionType>("api/DropdownData/TransmissionTypes"), "Id", "Type", carInfo.TransmissionTypeId);
            return View(carInfo);
        }

// POST: api/CarInfoes
        [HttpPost]
        [ResponseType(typeof(CarInfo))]
        public IHttpActionResult PostCarInfo(CarInfo carInfo)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.CarInfoes.Add(carInfo);
            db.SaveChanges();

            return CreatedAtRoute("DefaultApi", new { id = carInfo.CarId }, carInfo);
        }
public async Task<ActionResult> Create()
        {
            var manufacturers = await GetDropdownDataAsync<Manufacturer>("api/DropdownData/Manufacturers");
            var carTypes = await GetDropdownDataAsync<CarType>("api/DropdownData/CarTypes");
            var transmissionTypes = await GetDropdownDataAsync<CarTransmissionType>("api/DropdownData/TransmissionTypes");

            ViewBag.ManufacturerId = new SelectList(manufacturers, "Id", "Name");
            ViewBag.CarTypeId = new SelectList(carTypes, "Id", "Type");
            ViewBag.TransmissionTypeId = new SelectList(transmissionTypes, "Id", "Type");
            return View();
        }

        private async Task<List<T>> GetDropdownDataAsync<T>(string endpoint)
        {
            var response = await _httpClient.GetAsync(endpoint);
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<List<T>>(json);
        }


//////////////////////////
[HttpGet]
        [Route("api/DropdownData/Manufacturers")]
        public IHttpActionResult GetManufacturers()
        {
            var manufacturers = db.Manufacturers.Select(m => new { m.Id, m.Name }).ToList();
            return Ok(manufacturers);
        }

        [HttpGet]
        [Route("api/DropdownData/CarTypes")]
        public IHttpActionResult GetCarTypes()
        {
            var carTypes = db.CarTypes.Select(ct => new { ct.Id, ct.Type }).ToList();
            return Ok(carTypes);
        }

        [HttpGet]
        [Route("api/DropdownData/TransmissionTypes")]
        public IHttpActionResult GetTransmissionTypes()
        {
            var transmissionTypes = db.CarTransmissionTypes.Select(tt => new { tt.Id, tt.Type }).ToList();
            return Ok(transmissionTypes);
        }

//////////////////////////////////
// POST: api/CarInfoes
        [HttpPost]
        [ResponseType(typeof(CarInfo))]
        public IHttpActionResult PostCarInfo(CarInfo carInfo)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.CarInfoes.Add(carInfo);
            db.SaveChanges();

            return CreatedAtRoute("DefaultApi", new { id = carInfo.CarId }, carInfo);
        }
