I am working on an angular project with web apicontrollers, bussiness layer(BL), Data access layer (DAL) and entities with SQL which is online banking portal. I have made all web apis in .net core mvc and i want angular part for the same . please give me step by step whole code


I am working on debitcard controller 
DebitCardController____________
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Online_Banking_Portal.BL;
using Online_Banking_Portal.DAL.Models;
using Online_Banking_Portal.Entities;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Online_Banking_Portal.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DebitCardController : Controller
    {
        private readonly OnlineBankingPortalContext _context = new OnlineBankingPortalContext();

        public DebitCardController()
        {
        }

        //Get: api/DebitCard/GetDebitCardDetails/{accountNumber}
    [HttpGet("GetDebitCardDetails/{accountNumber}")]
        public async Task<IActionResult> GetDebitCardDetails(long accountNumber)
        {
            DebitCardBL dcBL = new DebitCardBL();

            //chckng Account Number exists
            bool accountExists = await dcBL.AccountNumberExists(accountNumber);
            if (!accountExists)
            {
                return BadRequest("Account number is not valid");
            }

            var debitCardDetails = dcBL.GetDebitCardBL(accountNumber).ToList();
            if (debitCardDetails == null || !debitCardDetails.Any())
            {
                return NotFound("No debit cards found for this account number. You can apply for a new debit card.");
            }

            return Ok(debitCardDetails);
        }

        // Apply for Debit Card
        //Get : api/DebitCard/ApplyDebitCard
        [HttpPost("ApplyDebitCard")]
        public async Task<IActionResult> ApplyDebitCard([FromBody] DebitCardApplication debitCard)
        {
            if (ModelState.IsValid)
            {
                DebitCardBL dcBL = new DebitCardBL();
                var result = await dcBL.ApplyDebitCardBL(debitCard);
                if (result>0)
                {
                    return Ok(debitCard);
                }
                else
                {
                    return Conflict($"A debit Card application already exists for account number {debitCard.AccountNo}");
                }
            }
            return BadRequest(ModelState);
        }

        // Allot Debit Cards
        [HttpPut("AllotDebitCard/{dcApplicationId}")]
        public async Task<IActionResult> AllotDebitCard(long dcApplicationId,[FromBody] DebitCardDetail dcDetail)
        {
            DebitCardBL dcBL = new DebitCardBL();
            if (dcApplicationId == 0 || dcDetail==null)
            {
                return BadRequest("Invalid application ID or debit Card Details.");
                //return NotFound("Debit card Application not found.");
            }
            var (added,message) = await dcBL.AllotDebitCardBL(dcApplicationId, dcDetail);
            if(!added)
            {
                return NotFound(message);
            }

            return Ok(message);

        }


        // List Debit Cards for a Customer
        [HttpGet("ListDebitCards/{customerId}")]
        public async Task<IActionResult> ListDebitCards(int customerId)
        {
            DebitCardBL dcBL = new DebitCardBL();

            //chckng Customer ID exists
            bool customerExists = await dcBL.CustomerIdExists(customerId);

            if (!customerExists)
            {
                return BadRequest("Customer ID is not valid");
            }
            var debitCardDetails = dcBL.GetDebitCardbyCustomerIdBL(customerId).ToList();

            if (debitCardDetails == null || !debitCardDetails.Any())
            {
                return NotFound("No debit cards found for this customer.");
            }
            return Ok(debitCardDetails);
        }
    }
}




DEbitCardDAL______________
using Microsoft.EntityFrameworkCore;
using Online_Banking_Portal.DAL.Models;
using Online_Banking_Portal.Entities;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Online_Banking_Portal.DAL
{
    public class DebitCardDAL
    {
        private readonly OnlineBankingPortalContext _context = new OnlineBankingPortalContext();

        public DebitCardDAL()
        {

        }
        public IEnumerable<DebitCardDetail> GetDebitCardDAL(long accountNumber)
        {
            try
            {
                List<DebitCardDetail> debitCardDetail = new List<DebitCardDetail>();
                debitCardDetail = _context.DebitCardDetails
               .Where(d => d.AccountNo == accountNumber)
               .Include(d => d.Dcapplication)
               .ToList();

                return debitCardDetail;
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

        //chckng Account number exists
        public async Task<bool> AccountNumberExistsDAL(long accountNumber)
        {
            try
            {
                return await _context.Accounts.AnyAsync(a => a.AccountNo == accountNumber);
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

        public  async Task<int> ApplyDebitCardDAL(DebitCardApplication debitCard)
        {
            //var added = 0;
            try
            {

                //Check if a debit Card application already exists for this account number

                var existingApplication =  await _context.DebitCardApplications.FirstOrDefaultAsync(a => a.AccountNo == debitCard.AccountNo);
                if (existingApplication != null)
                {
                    //if an application already exists, return a conflict response 
                    return 0;
                       // ($"A debit card application already exists for account number {debitCard.AccountNo}"));
                }


                debitCard.DateOfApplication = DateTime.Now;
                debitCard.Status = "Applied";
                /*debitCard.IsActive = true;*/
                _context.DebitCardApplications.Add(debitCard);
                await _context.SaveChangesAsync();
                return 1;
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
            //return added;
        }


        public async Task<(bool,string)> AllotDebitCardDAL(long dcApplicationId, DebitCardDetail dcDetail)
        {
            //bool added = false;
            try
            {
                var application= await _context.DebitCardApplications.FirstOrDefaultAsync(a => a.DcapplicationId==dcApplicationId);
                if (application == null)
                {
                    return (false,"Debit Card Application not found."); //application not found
                }

                if(application.Status=="Alloted")
                {
                    return (false, "Debit card is already Alloted");
                }

                dcDetail.DcapplicationId = dcApplicationId;
                //Random random = new Random();
                dcDetail.Cvv = new Random().Next(100, 999);

                //debitCard.IsActive = true;
                _context.DebitCardDetails.Add(dcDetail);

                application.Status = "Alloted";
                _context.DebitCardApplications.Update(application);
               await _context.SaveChangesAsync();
                return (true,"Debit card Alloted successfully");  //successfully added
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
            //return added;
        }

        public IEnumerable<DebitCardApplication> GetDebitCardbyCustomerIdDAL(long customerId)
        {
            try
            {
               var debitCardDetail = _context.DebitCardApplications
              .Include(dc => dc.DebitCardDetails)
              .Where(dc => dc.CustomerId == customerId)
              .ToList();

                return debitCardDetail;
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

        //chckng Customer ID exists
        public async Task<bool> CustomerIdExistsDAL(int customerId)
        {
            try
            {
                return await _context.Customers.AnyAsync(a => a.CustomerId == customerId);
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

    }
}


DebitCardBL______________
using Online_Banking_Portal.DAL;
using Online_Banking_Portal.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Online_Banking_Portal.BL
{
    public class DebitCardBL
    {
        public IEnumerable<DebitCardDetail> GetDebitCardBL(long accountNumber)
        {
            DebitCardDAL debitCardDetails = new DebitCardDAL();
            return debitCardDetails.GetDebitCardDAL(accountNumber);
        }

        //Checkng if Account number exixsts
        public async Task<bool> AccountNumberExists(long accountNumber)
        {
            DebitCardDAL debitCardDAL = new DebitCardDAL();
            return await debitCardDAL.AccountNumberExistsDAL(accountNumber);
        }
        

        public Task<int> ApplyDebitCardBL(DebitCardApplication debitCard)
        {
            DebitCardDAL debitCardDetails = new DebitCardDAL();
            //var added=debitCardDetails.ApplyDebitCardDAL(debitCard);
            return debitCardDetails.ApplyDebitCardDAL(debitCard); 
        }

        public async Task<(bool,string)> AllotDebitCardBL(long dcApplicationId, DebitCardDetail dcDetail)
        {
            DebitCardDAL debitCardDetails = new DebitCardDAL();
            //string message;
            //bool added = await debitCardDetails.AllotDebitCardDAL(dcApplicationId, dcDetail,out message);
            return await debitCardDetails.AllotDebitCardDAL(dcApplicationId, dcDetail);
            //return (added,message);
        }

        public IEnumerable<DebitCardApplication> GetDebitCardbyCustomerIdBL(long customerId)
        {
            DebitCardDAL debitCardDetails = new DebitCardDAL();
            return debitCardDetails.GetDebitCardbyCustomerIdDAL(customerId);
        }

        //To check Customer exists
        public async Task<bool> CustomerIdExists(int customerId)
        {
            DebitCardDAL debitCardDAL = new DebitCardDAL();
            return await debitCardDAL.CustomerIdExistsDAL(customerId);
        }


    }
}











DEbitCrdApplications entity

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Online_Banking_Portal.Entities
{
    public class DebitCardApplication
    {
        public long DcapplicationId { get; set; }

        public DateTime? DateOfApplication { get; set; }

        public long AccountNo { get; set; }

        public int CustomerId { get; set; }

        public string? Status { get; set; }

        public virtual Account? AccountNoNavigation { get; set; } = null!;

        public virtual ICollection<DebitCardDetail> DebitCardDetails { get; set; } = new List<DebitCardDetail>();
    }
}





debitcarddetails entity

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Online_Banking_Portal.Entities
{
    public class DebitCardDetail
    {
        public long DebitCardNo { get; set; }

        public long DcapplicationId { get; set; }

        public long AccountNo { get; set; }

        public int Cvv { get; set; }

        public DateTime? ExpiryDate { get; set; }

        public virtual Account? AccountNoNavigation { get; set; } = null!;

        public virtual DebitCardApplication? Dcapplication { get; set; } = null!;
    }
}



