CREATE TABLE Payee (
    PayeeId INT NOT NULL CHECK (PayeeId >= 100 AND PayeeId <= 999) PRIMARY KEY,
    UserId INT NOT NULL,
    PayeeAccountNo CHAR(12) NOT NULL CHECK (PayeeAccountNo LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
    PayeeIfsc CHAR(8) NOT NULL CHECK (PayeeIfsc LIKE '[A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9]'),
    FOREIGN KEY (UserId) REFERENCES Customer(Id)
);



CREATE TABLE Transaction (
    TransactionId INT IDENTITY(11,1) PRIMARY KEY,
    AccountNo CHAR(12) NOT NULL,
    TransactionType NVARCHAR(10) CHECK (TransactionType IN ('Withdrawal', 'Deposit')) NOT NULL,
    Amount DECIMAL(18, 2) NOT NULL,
    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (AccountNo) REFERENCES Account(AccountNo)
);


CREATE TABLE Transaction (
    TransactionId INT IDENTITY(11,1) PRIMARY KEY,
    AccountNo CHAR(12) NOT NULL,
    TransactionType NVARCHAR(10) CHECK (TransactionType IN ('Withdrawal', 'Deposit')) NOT NULL,
    Amount DECIMAL(18, 2) NOT NULL,
    TransactionDate DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (AccountNo) REFERENCES Account(AccountNo)
);
======================================================DEBIT CARD DETAILS===========================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Online_Banking_Portal.Entities
{
    public class DebitCardDetail
    {
        public long DebitCardNo { get; set; }

        public long DcapplicationId { get; set; }

        public long AccountNo { get; set; }

        public int Cvv { get; set; }

        public DateTime? ExpiryDate { get; set; }

        public virtual Account AccountNoNavigation { get; set; } = null!;

        public virtual DebitCardApplication Dcapplication { get; set; } = null!;
        public bool IsActive { get; set; }  //Created New Property : Aishwarya 
    }
}
==============================================DEBIT CARD APPLICATION DETAILS====================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Online_Banking_Portal.Entities
{
    public class DebitCardApplication
    {
        public long DcapplicationId { get; set; }

        public DateTime? DateOfApplication { get; set; }

        public long AccountNo { get; set; }

        public int CustomerId { get; set; }

        public string? Status { get; set; }

        public virtual Account AccountNoNavigation { get; set; } = null!;

        public virtual ICollection<DebitCardDetail> DebitCardDetails { get; set; } = new List<DebitCardDetail>();
        public bool IsActive { get; set; }  //created new proprty :Aishwarya
    }
}
===========================================================DEBITCARDCONTROLLER======================================================================
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Online_Banking_Portal.DAL.Models;
using Online_Banking_Portal.Entities;

namespace Online_Banking_Portal.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DebitCardController : Controller
    {
            private readonly OnlineBankingPortalContext _context;

            public DebitCardController(OnlineBankingPortalContext context)
            {
                _context = context;
            }

            // Add Debit Card
            [HttpPost("AddDebitCard")]
            public async Task<IActionResult> AddDebitCard([FromBody] DebitCardApplication debitCard)
            {
                if (ModelState.IsValid)
                {
                    debitCard.DateOfApplication = DateTime.Now;
                    debitCard.IsActive = true;
                    _context.DebitCardApplication.Add(debitCard);
                    await _context.SaveChangesAsync();
                    return Ok(debitCard);
                }
                return BadRequest(ModelState);
            }

            // Activate Debit Card
            [HttpPut("ActivateDebitCard/{cardNumber}")]
            public async Task<IActionResult> ActivateDebitCard(long cardNumber)
            {
                var debitCard = await _context.DebitCardApplication.FindAsync(cardNumber);
                if (debitCard == null)
                {
                    return NotFound("Debit card not found.");
                }

                debitCard.IsActive = true;
                _context.Entry(debitCard).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return Ok("Debit card activated successfully.");
            }

            // Deactivate Debit Card
            [HttpPut("DeactivateDebitCard/{cardNumber}")]
            public async Task<IActionResult> DeactivateDebitCard(long cardNumber)
            {
                var debitCard = await _context.DebitCardApplication.FindAsync(cardNumber);
                if (debitCard == null)
                {
                    return NotFound("Debit card not found.");
                }

                debitCard.IsActive = false;
                _context.Entry(debitCard).State = EntityState.Modified;
                await _context.SaveChangesAsync();

                return Ok("Debit card deactivated successfully.");
            }

            // List Debit Cards for a Customer
            [HttpGet("ListDebitCards/{customerId}")]
            public async Task<IActionResult> ListDebitCards(int customerId)
            {
                var debitCards = await _context.DebitCardApplication
                    .Where(dc => dc.CustomerId == customerId)
                    .ToListAsync();

                if (debitCards == null || !debitCards.Any())
                {
                    return NotFound("No debit cards found for this customer.");
                }

                return Ok(debitCards);
            }
        }
    }
================================================================================================================================================
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Online_Banking_Portal.DAL.Models;
using Online_Banking_Portal.Entities;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Online_Banking_Portal.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DebitCardController : ControllerBase
    {
        private readonly OnlineBankingPortalContext _context;

        public DebitCardController(OnlineBankingPortalContext context)
        {
            _context = context;
        }

        // Get Debit Card Details by Account Number
        [HttpGet("GetDebitCardDetails/{accountNumber}")]
        public async Task<IActionResult> GetDebitCardDetails(long accountNumber)
        {
            var debitCardDetails = await _context.DebitCardDetail
                .Where(d => d.AccountNo == accountNumber)
                .Include(d => d.Dcapplication)
                .ToListAsync();

            if (debitCardDetails == null || !debitCardDetails.Any())
            {
                return NotFound("No debit cards found for this account number. You can apply for a new debit card.");
            }

            return Ok(debitCardDetails);
        }

        // Add Debit Card
        [HttpPost("AddDebitCard")]
        public async Task<IActionResult> AddDebitCard([FromBody] DebitCardApplication debitCard)
        {
            if (ModelState.IsValid)
            {
                debitCard.DateOfApplication = DateTime.Now;
                debitCard.IsActive = true;
                _context.DebitCardApplication.Add(debitCard);
                await _context.SaveChangesAsync();
                return Ok(debitCard);
            }
            return BadRequest(ModelState);
        }

        // Activate Debit Card
        [HttpPut("ActivateDebitCard/{applicationId}")]
        public async Task<IActionResult> ActivateDebitCard(long applicationId)
        {
            var debitCard = await _context.DebitCardApplication.FindAsync(applicationId);
            if (debitCard == null)
            {
                return NotFound("Debit card not found.");
            }

            debitCard.IsActive = true;
            _context.Entry(debitCard).State = EntityState.Modified;
            await _context.SaveChangesAsync();

            return Ok("Debit card activated successfully.");
        }

        // Deactivate Debit Card
        [HttpPut("DeactivateDebitCard/{applicationId}")]
        public async Task<IActionResult> DeactivateDebitCard(long applicationId)
        {
            var debitCard = await _context.DebitCardApplication.FindAsync(applicationId);
            if (debitCard == null)
            {
                return NotFound("Debit card not found.");
            }

            debitCard.IsActive = false;
            _context.Entry(debitCard).State = EntityState.Modified;
            await _context.SaveChangesAsync();

            return Ok("Debit card deactivated successfully.");
        }

        // List Debit Cards for a Customer
        [HttpGet("ListDebitCards/{customerId}")]
        public async Task<IActionResult> ListDebitCards(int customerId)
        {
            var debitCardApplications = await _context.DebitCardApplication
                .Where(dc => dc.CustomerId == customerId)
                .Include(dc => dc.DebitCardDetails)
                .ToListAsync();

            if (debitCardApplications == null || !debitCardApplications.Any())
            {
                return NotFound("No debit cards found for this customer.");
            }

            return Ok(debitCardApplications);
        }
    }
}
==============================================DB CONTEXT=============================================================
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Online_Banking_Portal.Entities;

namespace Online_Banking_Portal.DAL.Models;

public partial class OnlineBankingPortalContext : DbContext
{
    public OnlineBankingPortalContext()
    {
    }

    public OnlineBankingPortalContext(DbContextOptions<OnlineBankingPortalContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountType> AccountTypes { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DebitCardApplication> DebitCardApplications { get; set; }

    public virtual DbSet<DebitCardDetail> DebitCardApplication { get; set; }

    public virtual DbSet<LoanApplication> LoanApplications { get; set; }

    public virtual DbSet<LoanPayment> LoanPayments { get; set; }

    public virtual DbSet<LoanType> LoanTypes { get; set; }

    public virtual DbSet<Payee> Payees { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=(localdb)\\local;Database=OnlineBankingPortal;Trusted_Connection=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountNo).HasName("PK__Accounts__349D9DFDFAB00810");

            entity.Property(e => e.Balance).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DateOfOpening).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.AccountType).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.AccountTypeId)
                .HasConstraintName("FK__Accounts__Accoun__2B3F6F97");

            entity.HasOne(d => d.Customer).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Accounts__Custom__2A4B4B5E");
        });

        modelBuilder.Entity<AccountType>(entity =>
        {
            entity.HasKey(e => e.AccountTypeId).HasName("PK__AccountT__8F9585AFDAB30091");

            entity.ToTable("AccountType");

            entity.Property(e => e.AccountTypeId).ValueGeneratedNever();
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64B8079F69AE");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.EmailId, "UQ__Customer__7ED91ACEDE0A0D7C").IsUnique();

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.EmailId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DebitCardApplication>(entity =>
        {
            entity.HasKey(e => e.DcapplicationId).HasName("PK__DebitCar__0F8506FDF68D3E42");

            entity.ToTable("DebitCardApplication");

            entity.Property(e => e.DcapplicationId).HasColumnName("DCApplicationId");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DateOfApplication).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Applied");

            entity.HasOne(d => d.AccountNoNavigation).WithMany(p => p.DebitCardApplications)
                .HasForeignKey(d => d.AccountNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DebitCard__Accou__300424B4");
        });

        modelBuilder.Entity<DebitCardDetail>(entity =>
        {
            entity.HasKey(e => e.DebitCardNo).HasName("PK__DebitCar__E52516E4A5206EF3");

            entity.Property(e => e.Cvv).HasColumnName("CVV");
            entity.Property(e => e.DcapplicationId).HasColumnName("DCApplicationId");
            entity.Property(e => e.ExpiryDate).HasDefaultValueSql("(dateadd(year,(3),getdate()))");

            entity.HasOne(d => d.AccountNoNavigation).WithMany(p => p.DebitCardDetails)
                .HasForeignKey(d => d.AccountNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DebitCard__Accou__33D4B598");

            entity.HasOne(d => d.Dcapplication).WithMany(p => p.DebitCardDetails)
                .HasForeignKey(d => d.DcapplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DebitCard__DCApp__34C8D9D1");
        });

        modelBuilder.Entity<LoanApplication>(entity =>
        {
            entity.HasKey(e => e.LoanApplicationId).HasName("PK__LoanAppl__F60027BDB1D6171C");

            entity.ToTable("LoanApplication");

            entity.Property(e => e.DateOfApplication).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.LoanStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("In Process");

            entity.HasOne(d => d.Customer).WithMany(p => p.LoanApplications)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__LoanAppli__Custo__619B8048");

            entity.HasOne(d => d.LoanType).WithMany(p => p.LoanApplications)
                .HasForeignKey(d => d.LoanTypeId)
                .HasConstraintName("FK__LoanAppli__LoanT__60A75C0F");
        });

        modelBuilder.Entity<LoanPayment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__LoanPaym__9B556A38C1C4EA26");

            entity.ToTable("LoanPayment");

            entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.LoanApplication).WithMany(p => p.LoanPayments)
                .HasForeignKey(d => d.LoanApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LoanPayme__LoanA__6477ECF3");
        });

        modelBuilder.Entity<LoanType>(entity =>
        {
            entity.HasKey(e => e.LoanTypeId).HasName("PK__LoanType__19466BAF974E6E8F");

            entity.ToTable("LoanType");

            entity.Property(e => e.LoanTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Roi).HasColumnName("ROI");
        });

        modelBuilder.Entity<Payee>(entity =>
        {
            entity.HasKey(e => e.PayeeId).HasName("PK__Payee__0BC3E4D97EF84105");

            entity.ToTable("Payee");

            entity.Property(e => e.PayeeAccountNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PayeeIfsccode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PayeeIFSCCode");
            entity.Property(e => e.PayeeName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.Payees)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payee__CustomerI__3E52440B");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK__Transact__55433A6BBB0306DA");

            entity.Property(e => e.AccountNo).HasColumnName("AccountNO");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.TransactionType).HasMaxLength(10);

            entity.HasOne(d => d.AccountNoNavigation).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.AccountNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Transacti__Accou__398D8EEE");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
==============================================================Status Code ERROR============================================
System.Text.Json.JsonException: A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of 32. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles. Path: $.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.Dcapplication.DebitCardDetails.DebitCardNo.
   at System.Text.Json.ThrowHelper.ThrowJsonException_SerializerCycleDetected(Int32 maxDepth)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)
   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Converters.ListOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeAsync(Stream utf8Json, T rootValue, CancellationToken cancellationToken, Object rootValueBoxed)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)

HEADERS
=======
Accept: */*
Accept-Encoding: gzip, deflate, br, zstd
Accept-Language: en-US,en;q=0.9
Connection: close
Host: localhost:44346
Referer: https://localhost:44346/swagger/index.html
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36
sec-ch-ua: "Not/A)Brand";v="8", "Chromium";v="126", "Google Chrome";v="126"
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: "Windows"
sec-fetch-site: same-origin
sec-fetch-mode: cors
sec-fetch-dest: empty
priority: u=1, i
======================================================================POST DEBIT CARD================================================================
 // Add Debit Card
 [HttpPost("AddDebitCard")]
 public async Task<IActionResult> AddDebitCard([FromBody] DebitCardApplication debitCard)
 {
     if (ModelState.IsValid)
     {
         debitCard.DateOfApplication = DateTime.Now;
         //debitCard.IsActive = true;
         _context.DebitCardApplications.Add(debitCard);
         await _context.SaveChangesAsync();
         return Ok(debitCard);
     }
     return BadRequest(ModelState);
 }

This is my POST Debit Card, I want to accept CustomerId , DateTimeStamp and AccountNo from user and this values should be passed to Admin to change the status of the debitcard application
==========================================================Debit Card Condition===========================================================
 // POST: api/DebitCard/ApplyForDebitCard
 [HttpPost("ApplyForDebitCard")]
 public async Task<IActionResult> ApplyForDebitCard([FromBody] DebitCardApplication debitCardApplication)
 {
     if (debitCardApplication == null)
     {
         return BadRequest("DebitCardApplication is null.");
     }

     try
     {
        debitCardApplication.Status = "Applied";
         debitCardApplication.DateOfApplication = DateTime.Now;
         _context.DebitCardApplications.Add(debitCardApplication);
         await _context.SaveChangesAsync();

         return Ok(debitCardApplication);
     }
     catch (Exception ex)
     {
         // Log the exception (use your preferred logging method)
         Console.WriteLine($"Error: {ex.Message}");
         return StatusCode(500, "Internal server error");
     }
 }
