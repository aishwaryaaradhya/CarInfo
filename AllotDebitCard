This is my debit-card-model.ts, app.module.ts,allot-debit-card.component.ts, DAL Layer, DebitCard controller. 
I want to edit the status of debitcard application to applied.Create Angular Component and html (which on allot click button, should change the status of the debitcard application. 
debit-card-model.ts----------------------
export interface DebitCardApplication {
    dcapplicationId: number;
    dateOfApplication?: Date;
    accountNo: number | null;
    customerId: number | null;
    status?: string;
    debitCardDetails?: DebitCardDetail[];
  }
  
  export interface DebitCardDetail {
    debitCardNo:number;
    dcapplicationId: number;
    accountNo: number;
    cvv: number;
    expiryDate?: number;
  }

app.module.ts--------------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ApplyDebitCardComponent } from './apply-debit-card/apply-debit-card.component';
import { AllotDebitCardComponent } from './allot-debit-card/allot-debit-card.component';
import { DebitCardDetailsComponent } from './debit-card-details/debit-card-details.component';
import { ListDebitCardsComponent } from './list-debit-cards/list-debit-cards.component';

@NgModule({
  declarations: [
    AppComponent,
    ApplyDebitCardComponent,
    AllotDebitCardComponent,
    DebitCardDetailsComponent,
    ListDebitCardsComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

allot-debit-card.component.ts------------------------
import { Component,OnInit } from '@angular/core';
import { DebitCardService } from '../debit-card.service';

@Component({
  selector: 'app-allot-debit-card',
  templateUrl: './allot-debit-card.component.html',
  styleUrl: './allot-debit-card.component.css'
})
export class AllotDebitCardComponent implements OnInit{
  debitCardDetails:any[]=[];
  accountNumber:number | undefined;

  constructor(private debitCradService:DebitCardService) { }

  ngOnInit(): void { }
    getDebitCardDetails():void{
      this.debitCradService.getDebitCardDetails
      (this.accountNumber).subscribe(
        (data)=>this.debitCardDetails=data,
        (error)=>console.error(error)
      );
    }
  }
----------------------debit-card-services------------------
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders} from '@angular/common/http';
import { Observable } from 'rxjs';
import { DebitCardDetail } from './models/debit-card.models';
// import { Account } from './models/debit-card.models';

interface debitCardApplication{
  dcapplicationId:number;
  dataOfApplication:Date;
  accounNo:Number;
  customerId:number;
  status:string;
}
@Injectable({
  providedIn: 'root'
})
export class DebitCardService {

  private baseUrl = 'https://localhost:44346/api/DebitCard';

  constructor(private http: HttpClient) { }

  // getAccount():Observable<Account[]>{
  //   return this.http.get<Account[]>(`${this.baseUrl}/accounts`);
  // }
  
  applyDebitCard(debitCardApplication: any): Observable<any> {
    return this.http.post(`${this.baseUrl}/ApplyDebitCard`, debitCardApplication);
  }

  //WORKING
  allotDebitCard(dcApplicationId: number, dcDetail: any): Observable<any> {
    return this.http.put(`${this.baseUrl}/AllotDebitCard/${dcApplicationId}`, dcDetail);
  }

  getDebitCardDetails(accountNo: number): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/GetDebitCardDetails/${accountNo}`);
  }

  listDebitCards(customerId: number): Observable<any> {
    return this.http.get(`${this.baseUrl}/ListDebitCards/${customerId}`);
  }
}
---------------------------DebitCardController----------------------
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Online_Banking_Portal.BL;
using Online_Banking_Portal.DAL.Models;
using Online_Banking_Portal.Entities;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Online_Banking_Portal.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DebitCardController : Controller
    {
        private readonly OnlineBankingPortalContext _context = new OnlineBankingPortalContext();

        public DebitCardController()
        {
        }

        //Get: api/DebitCard/GetDebitCardDetails/{accountNumber}
    [HttpGet("GetDebitCardDetails/{accountNumber}")]
        public async Task<IActionResult> GetDebitCardDetails(long accountNumber)
        {
            DebitCardBL dcBL = new DebitCardBL();

            //chckng Account Number exists
            bool accountExists = await dcBL.AccountNumberExists(accountNumber);
            if (!accountExists)
            {
                return BadRequest("Account number is not valid");
            }

            var debitCardDetails = dcBL.GetDebitCardBL(accountNumber).ToList();
            if (debitCardDetails == null || !debitCardDetails.Any())
            {
                return NotFound("No debit cards found for this account number. You can apply for a new debit card.");
            }

            return Ok(debitCardDetails);
        }

        // Apply for Debit Card
        //Get : api/DebitCard/ApplyDebitCard
        [HttpPost("ApplyDebitCard")]
        public async Task<IActionResult> ApplyDebitCard([FromForm] DebitCardApplication debitCard)
        {
            if (ModelState.IsValid)
            {
                DebitCardBL dcBL = new DebitCardBL();
                var result = await dcBL.ApplyDebitCardBL(debitCard);
                if (result>0)
                {
                    return Ok(debitCard);
                }
                else
                {
                    return Conflict($"A debit Card application already exists for account number {debitCard.AccountNo}");
                }
            }
            return BadRequest(ModelState);
        }

        // Allot Debit Cards
        [HttpPut("AllotDebitCard/{dcApplicationId}")]
        public async Task<IActionResult> AllotDebitCard(long dcApplicationId,[FromForm] DebitCardDetail dcDetail)
        {
            DebitCardBL dcBL = new DebitCardBL();
            if (dcApplicationId == 0 || dcDetail==null)
            {
                return BadRequest("Invalid application ID or debit Card Details.");
                //return NotFound("Debit card Application not found.");
            }
            var (added,message) = await dcBL.AllotDebitCardBL(dcApplicationId, dcDetail);
            if(!added)
            {
                return NotFound(message);
            }

            return Ok(message);

        }


        // List Debit Cards for a Customer
        [HttpGet("ListDebitCards/{customerId}")]
        public async Task<IActionResult> ListDebitCards(int customerId)
        {
            DebitCardBL dcBL = new DebitCardBL();

            //chckng Customer ID exists
            var customerExists = await dcBL.CustomerIdExists(customerId);

            if (!customerExists)
            {
                return BadRequest("Customer ID is not valid");
            }
            var debitCardDetails = dcBL.GetDebitCardbyCustomerIdBL(customerId).ToList();

            if (debitCardDetails == null || !debitCardDetails.Any())
            {
                return NotFound("No debit cards found for this customer.");
            }
            return Ok(debitCardDetails);
        }
    }
}
----------------------------DEbitCardDAL-------------------------------
using Microsoft.EntityFrameworkCore;
using Online_Banking_Portal.DAL.Models;
using Online_Banking_Portal.Entities;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Online_Banking_Portal.DAL
{
    public class DebitCardDAL
    {
        private readonly OnlineBankingPortalContext _context = new OnlineBankingPortalContext();

        public DebitCardDAL()
        {

        }
        public IEnumerable<DebitCardDetail> GetDebitCardDAL(long accountNumber)
        {
            try
            {
                List<DebitCardDetail> debitCardDetail = new List<DebitCardDetail>();
                debitCardDetail = _context.DebitCardDetails
               .Where(d => d.AccountNo == accountNumber)
               .Include(d => d.Dcapplication)
               .ToList();

                return debitCardDetail;
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

        //chckng Account number exists
        public async Task<bool> AccountNumberExistsDAL(long accountNumber)
        {
            try
            {
                return await _context.Accounts.AnyAsync(a => a.AccountNo == accountNumber);
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

        public  async Task<int> ApplyDebitCardDAL(DebitCardApplication debitCard)
        {
            //var added = 0;
            try
            {

                //Check if a debit Card application already exists for this account number

                var existingApplication =  await _context.DebitCardApplications.FirstOrDefaultAsync(a => a.AccountNo == debitCard.AccountNo);
                if (existingApplication != null)
                {
                    //if an application already exists, return a conflict response 
                    return 0;
                       // ($"A debit card application already exists for account number {debitCard.AccountNo}"));
                }


                debitCard.DateOfApplication = DateTime.Now;
                debitCard.Status = "Applied";
                /*debitCard.IsActive = true;*/
                _context.DebitCardApplications.Add(debitCard);
                await _context.SaveChangesAsync();
                return 1;
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
            //return added;
        }


        public async Task<(bool,string)> AllotDebitCardDAL(long dcApplicationId, DebitCardDetail dcDetail)
        {
            //bool added = false;
            try
            {
                var application= await _context.DebitCardApplications.FirstOrDefaultAsync(a => a.DcapplicationId==dcApplicationId);
                if (application == null)
                {
                    return (false,"Debit Card Application not found."); //application not found
                }

                if(application.Status=="Alloted")
                {
                    return (false, "Debit card is already Alloted");
                }

                dcDetail.DcapplicationId = dcApplicationId;
                //Random random = new Random();
                dcDetail.Cvv = new Random().Next(100, 999);

                //debitCard.IsActive = true;
                _context.DebitCardDetails.Add(dcDetail);

                application.Status = "Alloted";
                _context.DebitCardApplications.Update(application);
               await _context.SaveChangesAsync();
                return (true,"Debit card Alloted successfully");  //successfully added
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
            //return added;
        }

        public IEnumerable<DebitCardApplication> GetDebitCardbyCustomerIdDAL(long customerId)
        {
            try
            {
               var debitCardDetail = _context.DebitCardApplications
              .Include(dc => dc.DebitCardDetails)
              .Where(dc => dc.CustomerId == customerId)
              .ToList();

                return debitCardDetail;
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

        //chckng Customer ID exists
        public async Task<bool> CustomerIdExistsDAL(int customerId)
        {
            try
            {
                return await _context.Customers.AnyAsync(a => a.CustomerId == customerId);
            }
            catch (Exception ex)
            {
                throw new SystemException(ex.Message);
            }
        }

    }
}
